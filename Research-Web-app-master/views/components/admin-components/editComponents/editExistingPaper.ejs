<script>
    Vue.component('paper-existing',{
        props:['papertype-list','indexedin-list'],
        template:`
        <div> <!-- WRALL ALL THE BELOW INTO SINGLE ROOT -->
        <div v-if="!isLoaded" class=" container center">
            <div class="preloader-wrapper big active">
                <div class="spinner-layer spinner-blue-only">
                    <div class="circle-clipper left">
                        <div class="circle"></div>
                    </div>
                    <div class="gap-patch">
                        <div class="circle"></div>
                    </div>
                    <div class="circle-clipper right">
                        <div class="circle"></div>
                    </div>
                </div>
            </div>
        </div>
        <div v-else>  
        <div class="row">
          <form class="col s12">
            <div class="input-field col s12 l12">
              <i class="material-icons prefix">search</i>
              <input id="icon_prefix" type="text" class="validate" v-model="search">
              <label for="icon_prefix">Search</label>
            </div>
          </form>
            <div class="input-field col s12 l6">
                <select v-model="selectedindexedin">
                    <option value="" selected>Filter By Indexed In</option>
                    <template v-for="index in indexedinList">
                        <option :value="index._id">{{ index.name }}</option>
                    </template>
                </select>
                <label class="purple-text text-darken-1">Indexed In</label>
            </div>
            <div class="input-field col s12 l6">
              <select v-model="selectedpapertype">
                <option value="" selected>Filter By Research Area</option>
                <template v-for="paper in papertypeList">
                    <option :value="paper._id">{{ paper.name }}</option>
                </template>
              </select>
              <label class="purple-text text-darken-1">Research Area</label>
            </div>
        </div>  
        <div v-if="filtereddata.length === 0">
            <div class=" row center">
                <div class="col s6 l4 offset-l4 offset-s3">
                    <img src="/assets/Not_Found.svg" class="responsive-img"/>
                </div>
            </div>
            <div class=" row center">
                <div class="col s12 l12">
                    <h5> No results.... </h5>
                </div>
            </div>
        </div>
        <div class="container" v-else>
            <ul class="collapsible">
                <template v-for="item in filtereddata" v-if>
                    <collapsible :eachrow="item" :papertype-list="papertypeList" :indexedin-list="indexedinList"></collapsible>
                </template>
            </ul>
        </div>
        </div><!-- WRAP ALL THE ABOVE INTO A SINGLE ROOT -->
        </div>
        `,
        data(){
            return{
                callData:[],
                errored:false,
                isLoaded:false,
                search:'',
                selectedindexedin:'',
                selectedpapertype:''
            }
        },
    beforeMount: function(){
        
        
    },
    mounted: function(){
        $('select').formSelect();
        $('.modal').modal({
            onOpenStart : function(){
                $('.datepicker').datepicker({
                    format:"yyyy-mm-dd",
                    container: 'body'
                });
            }
        });
        axios
            .get('/profile/getPapers')
            .then(response => {
                this.callData = response.data.papers;
            })
            .catch(error => {
                console.log(error)
                this.errored = true
            })
            .finally(() => this.isLoaded = true);
         
    },
    computed: {
            filtereddata: function () {
                var ele = this.callData.filter((para) => {
                    return para.name.toUpperCase().match(this.search.toUpperCase()) &&
                        para.typeofpaper._id.toUpperCase().match(this.selectedpapertype.toUpperCase()) &&
                        para.indexedin._id.toUpperCase().match(this.selectedindexedin.toUpperCase());
                });
                //document.getElementById('fellowshipbadge').innerText = ele.length;
                if(ele.length){
                    $('select').formSelect();
                    $('.modal').modal({
                        onOpenStart : function(){
                            $('.datepicker').datepicker({
                                format:"yyyy-mm-dd",
                                container: 'body'
                            });
                        }
                    }); 
                }
                return ele;
            }
        }
        
    });
    Vue.component('modal-form-paper',{
        props : ['eachrow', 'papertype-list', 'indexedin-list'],
        template: `
            <form :id="eachrow._id" @submit.prevent="submit">
                <div class="modal modal-fixed-footer" :id="eachrow._id+'form'">
                    <div class="row modal-content">
                        <div class="container">
                            <div class="col s12 l12 input-field">
                                <input id="title" name="name" type="text" :value="eachrow.name">
                                <label for="title">Title</label>
                            </div>
                            <div class="col s12 l12 input-field">
                                <input id="description" name="description" type="text" :value="eachrow.description" >
                                <label for="description">Description</label>
                            </div>
                            <div class="col s12 l12 input-field">
                                <input id="venue" name="conferencevenue" type="text" :value="eachrow.conferencevenue">
                                <label for="venue">Conference Venue</label>
                            </div>
                            <div class="input-field col s12 l12">
                               <select name="typeofpaper" required>
                                    <option value="" selected disabled>Select Research Area</option>
                                    <template v-for="paper in papertypeList">
                                        <option :value="paper._id" :selected="paper.name === eachrow.typeofpaper.name">{{ paper.name }}</option>
                                    </template>
                                </select>
                                <label class="">Research Area</label>
                            </div>
                            <div class="input-field col s12 l12">
                                 <select name="indexedin" required>
                                    <option value="" selected disabled>Select Indexed In</option>
                                    <template v-for="index in indexedinList">
                                        <option :value="index._id" :selected="index.name === eachrow.indexedin.name">{{ index.name }}</option>
                                    </template>
                                </select>
                                <label class="">Indexed In</label>
                            </div>
                            <div class="col s12 l12 input-field">
                                <textarea id="file" name="link" type="text" class="materialize-textarea" :value="eachrow.link"></textarea>
                                <label for="file">File</label>
                            </div>
                            <div class="col s12 l6">
                                <input type="text" name="publishdate" class="datepicker" id="sdate" :value="(new Date(eachrow.publishdate)).getFullYear() + '-' + ((new Date(eachrow.publishdate)).getMonth()+1) + '-' + (new Date(eachrow.publishdate)).getDate()">
                                <label for="sdate">Published Date</label>
                            </div>
                            <div class="col s12 l6">
                                <input type="text" name="lastdatesubmission" class="datepicker" id="edate" :value="(new Date(eachrow.lastdatesubmission)).getFullYear() + '-' + ((new Date(eachrow.lastdatesubmission)).getMonth()+1) + '-' + (new Date(eachrow.lastdatesubmission)).getDate()">
                                <label for="edate">Last Date of Submission</label>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <a href="javascript:void(0)" class="btn-flat white-text red darken-3 modal-close"><i class="material-icons left">close</i> Cancel</a>
                        <button type="submit" class="btn-flat white-text green modal-close"><i class="material-icons left">save</i> Save Changes</button>
                    </div>
                </div>
            </form>
        `,
        methods:{
            submit : function(event){
                var object = {};
                object['_id'] = this.eachrow._id;
                (new FormData(event.target)).forEach(function (value, key) {
                        object[key] = value;
                });
                console.log("Form Data:",object);
                Swal.fire({
                    title: 'Are you sure you want to edit this record ?',
                    showCancelButton: true,
                    icon : 'info',
                    confirmButtonText: 'Confirm',
                    showLoaderOnConfirm: true,
                    preConfirm: (login) => {
                        console.log("reached axios");
                        return axios.post('/profile/addOrChangeCallForPaper',
                            object).then((res) => { return res }).catch(err => console.log(err))
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                }).then((result) => {
                    // what are you returning ? if it's an error we need to show appropriate msg to user   
                    if (result.value.data === "Paper edited successfully") {
                        Swal.fire(
                            {
                                title : "Paper was edited successfully!!",
                                text : "The paper was edited successfully!",
                                showConfirmButton : true,
                                confirmButtonText : 'Reload the page to see details!',
                                allowOutsideClick : false,
                                allowEscapeKey : false,
                                allowEnterKey : false,
                                icon :   'success'
                            }
                        ).then((res)=>{
                            console.log(res);
                            
                            if(res.isConfirmed){
                                location.reload();
                            } 
                        })
                    }
                    else if(result.value.data === "Paper not found!!!"){
                            Swal.fire(
                            'Unable to process request',
                            'Paper Not found.',
                            'error'
                        )
                    }
                    else if(result.value.data === "Insufficient data !!"){
                        Swal.fire(
                            'Insufficient data !',
                            'Check all the fields of the form',
                            'warning'
                        )
                    }
                    else if (result.dismiss === Swal.DismissReason.cancel) {
                        Swal.fire(
                            'Cancelled',
                            'No changes made',
                            'error'
                        )
                    }
                });
            }
        },
        mounted: function(){
           
        }
    })
    Vue.component('collapsible',{
        props:["eachrow", "papertype-list","indexedin-list"],
        template:`
            <li>
                <div class="collapsible-header">
                    <i class="material-icons purple-text text-darken-1">expand_more</i>{{ eachrow.name }}
                </div>
                <div class="collapsible-body">
                    <div class="row">
                        <div class="col s12 l6 "> <img src="assets/test.jpeg" alt="" class="responsive-img"> </div>
                        <div class="col s12 l6"> <b>Description :</b> </div>
                        <div class="col s12 l6">{{ eachrow.description }}</div>
                        <div class="col s12 l6"> <b>Conference Venue :</b> </div>
                        <div class="col s12 l6">{{ eachrow.conferencevenue }}</div>
                        <div class="col s12 l6"> <b>Research Area :</b> </div>
                        <div class="col s12 l6">{{ eachrow.typeofpaper.name }}</div>
                        <div class="col s12 l6 "> <b>Indexed In :</b> </div>
                        <div class="col s12 l6 ">{{ eachrow.indexedin.name }}</div>  
                        <div class="col s12 l6" style="align-centre;"><a :href="eachrow.link" class="btn waves-effect waves-purple white-text purple">Find More</a></div>
                                  
                    </div>
                    <div class="row">
                        <div class="col s12 l6"> <b>Published Date :</b>
                            {{ (new Date(eachrow.publishdate)).getDate() + '/' + ((new Date(eachrow.publishdate)).getMonth()+1) + '/' + (new Date(eachrow.publishdate)).getFullYear() }}
                        </div>
                        <div class="col s12 l6 push-l2"><b>Last Date :</b>
                            {{ (new Date(eachrow.lastdatesubmission)).getDate() + '/' + ((new Date(eachrow.lastdatesubmission)).getMonth()+1) + '/' + (new Date(eachrow.lastdatesubmission)).getFullYear() }}
                        </div>
                    </div>
                    <div class="row">
                        <div class="col s6 l6">
                            <a :href="'#'+eachrow._id+'form'" class="btn waves-effect waves-light orange darken-3 white-text left modal-trigger"><i
                                    class="material-icons left">edit</i>Edit</a>
                                    <modal-form-paper :eachrow="eachrow" :papertype-list="papertypeList" :indexedin-list="indexedinList"> </modal-form-paper>
                        </div>
                        <div class="col s6 l6">
                            <a @click.prevent="deletedata" href="#" class="btn waves-effect waves-light  right red darken-3"><i class="material-icons left">delete</i>Delete</a>
                        </div>
                    </div>
                </div>
            </li>
        `,
        data(){
            return{

            }
        },
        methods:{
            deletedata:function(){
                Swal.fire({
                    title: 'Are you sure you want to delete this paper ?',
                    showCancelButton: true,
                    icon: 'info',
                    confirmButtonText: 'Confirm',
                    showLoaderOnConfirm: true,
                    preConfirm: (login) => {
                        console.log("reached axios");
                        return axios.post('/profile/deleteCallForPaper', { _id: this.eachrow._id }).then((res) => {  return res  }).catch(err => console.log(err))
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                }).then((result) => {
                    // what are you returning ? if it's an error we need to show appropriate msg to user   
                    if (result.value.data === "Deleted Successfully!!") {
                        Swal.fire(
                            {
                                title: "Paper deleted !!",
                                text: "The paper was deleted successfully.",
                                showConfirmButton: true,
                                confirmButtonText: 'Reload the page to see changes',
                                allowOutsideClick: false,
                                allowEscapeKey: false,
                                allowEnterKey: false,
                                icon: 'success'
                            }
                        ).then((res) => {
                            console.log(res);

                            if (res.isConfirmed) {
                                location.reload();
                            }

                        })
                    }
                    else if (result.value.data === "Paper not found!!!") {
                        Swal.fire(
                            'Unable to process request',
                            'Paper Not found.',
                            'error'
                        )
                    }
                    else if (result.value.data === "Insufficient data !!") {
                        Swal.fire(
                            'Insufficient data !',
                            'Select paper properly',
                            'warning'
                        )
                    }
                    else if (result.dismiss === Swal.DismissReason.cancel) {
                        Swal.fire(
                            'Cancelled',
                            'No changes made',
                            'error'
                        )
                    }
                });  
            }
        },
        mounted:function(){
            $('.modal').modal();
            $('.collapsible').collapsible();
            M.updateTextFields();
            // $('.datepicker').datepicker({
            //     container: 'body'
            // })
        },
        
    });
</script>