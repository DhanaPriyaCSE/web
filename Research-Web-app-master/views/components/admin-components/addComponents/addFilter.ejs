<script>
    Vue.component('add-filter',{
        props:[],
        data:function(){
            return{
                selectedfilter:'',
                filtername:''
            }
        },
        template:`
        <div><!--WRAPPER-->
        
            <div class="col s12 m7 l5 card waves-effect waves-purple center modal-trigger" href="#addfiltermodal">
                <div class="card-image center">
                    <div class="row center">
                        <i class="col s12 l12 material-icons purple-text text-darken-1 large">add</i>
                    </div>
                    <div class="row center">
                        <span class="col s12 l12 purple-text text-darken-1">Add Filter</span>
                    </div>
                </div>
            </div>
            <form id="filter" v-on:submit.prevent="submitFilter">
                <div class="modal modal-fixed-footer" id="addfiltermodal">
                    <div class="row modal-content">
                        <div class="container">
                            <div class="col s12 l12 input-field">
                                <input id="title" type="text" v-model="filtername">
                                <label for="title">Filter Name</label>
                            </div>
                            <div class="input-field col s12 l12">
                               <select required v-model="selectedfilter">
                                    <option value="" selected disabled>Select Filter</option>
                                    <option value="discipline">Discipline for Proposal</option>
                                    <option value="fundingagency">Funding Agency</option>
                                    <option value="indexedin">Indexed In</option>
                                    <option value="typeoffellowship">Discipline for Fellowship</option>
                                    <option value="typeofpaper">Research Area</option>
                                    <option value="university">Degree</option>
                                </select>
                                <label class="">Filter Type</label>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <a href="javascript:void(0)" class="btn-flat white-text red darken-3 modal-close"><i class="material-icons left">close</i> Cancel</a>
                        <button type="submit" class="btn-flat white-text green"><i class="material-icons left">save</i> Save Changes</button>
                    </div>
                </div>
            </form>
        
        </div><!--WRAPPER-->
        `,
        methods:{
            submitFilter:function(){
                var object = {};
                object['name']=this.filtername;
                if(this.selectedfilter === "discipline"){
                    Swal.fire({
                        title: 'Are you sure you want to create this filter ?',
                        showCancelButton: true,
                        icon: 'info',
                        confirmButtonText: 'Confirm',
                        showLoaderOnConfirm: true,
                        preConfirm: (login) => {
                            console.log("reached axios");
                            return axios.post('/profile/addDiscipline',
                                object).then((res) => { return res }).catch(err => console.log(err))
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        // what are you returning ? if it's an error we need to show appropriate msg to user   
                        if (result.value.data === "Discipline created successfully!") {
                            Swal.fire(
                                {
                                    title: "Discipline was saved successfully!!",
                                    text: "The discipline was saved successfully!",
                                    showConfirmButton: true,
                                    confirmButtonText: 'Reload the page to see details!',
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    allowEnterKey: false,
                                    icon: 'success'
                                }
                            ).then((res) => {
                                console.log(res);

                                if (res.isConfirmed) {
                                    location.reload();
                                }
                            })
                        }
                        else if (result.value.data === "Unable to create discipline!") {
                            Swal.fire(
                                'Unable to process request',
                                'Contact a better admin',
                                'error'
                            )
                        }
                        else if (result.value.data === "Discipline already exists") {
                            Swal.fire(
                                'Unable to process request',
                                'Duplicate filter',
                                'error'
                            )
                        }
                        else if (result.value.data === "Insufficient data !!") {
                            Swal.fire(
                                'Insufficient data !',
                                'Check all the fields of the form',
                                'warning'
                            )
                        }
                        else if (result.dismiss === Swal.DismissReason.cancel) {
                            Swal.fire(
                                'Cancelled',
                                'No changes made',
                                'error'
                            )
                        }
                    });
                }
                else if(this.selectedfilter ==="fundingagency"){
                    Swal.fire({
                        title: 'Are you sure you want to create this filter ?',
                        showCancelButton: true,
                        icon: 'info',
                        confirmButtonText: 'Confirm',
                        showLoaderOnConfirm: true,
                        preConfirm: (login) => {
                            console.log("reached axios");
                            return axios.post('/profile/addFundingagency',
                                object).then((res) => { return res }).catch(err => console.log(err))
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        // what are you returning ? if it's an error we need to show appropriate msg to user   
                        if (result.value.data === "Fundingagency created successfully!") {
                            Swal.fire(
                                {
                                    title: "Funding Agency was saved successfully!!",
                                    text: "The funding agency was saved successfully!",
                                    showConfirmButton: true,
                                    confirmButtonText: 'Reload the page to see details!',
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    allowEnterKey: false,
                                    icon: 'success'
                                }
                            ).then((res) => {
                                console.log(res);

                                if (res.isConfirmed) {
                                    location.reload();
                                }
                            })
                        }
                        else if (result.value.data === "Unable to create fundingagency!") {
                            Swal.fire(
                                'Unable to process request',
                                'Contact a better admin',
                                'error'
                            )
                        }
                        else if (result.value.data === "Fundingagency already exists") {
                            Swal.fire(
                                'Unable to process request',
                                'Duplicate filter',
                                'error'
                            )
                        }
                        else if (result.value.data === "Insufficient data !!") {
                            Swal.fire(
                                'Insufficient data !',
                                'Check all the fields of the form',
                                'warning'
                            )
                        }
                        else if (result.dismiss === Swal.DismissReason.cancel) {
                            Swal.fire(
                                'Cancelled',
                                'No changes made',
                                'error'
                            )
                        }
                    });

                }
                else if (this.selectedfilter === "indexedin") {
                    Swal.fire({
                        title: 'Are you sure you want to create this filter ?',
                        showCancelButton: true,
                        icon: 'info',
                        confirmButtonText: 'Confirm',
                        showLoaderOnConfirm: true,
                        preConfirm: (login) => {
                            console.log("reached axios");
                            return axios.post('/profile/addIndexedin',
                                object).then((res) => { return res }).catch(err => console.log(err))
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        // what are you returning ? if it's an error we need to show appropriate msg to user   
                        if (result.value.data === "Indexedin created successfully!") {
                            Swal.fire(
                                {
                                    title: "Indexed In was saved successfully!!",
                                    text: "The indexed in was saved successfully!",
                                    showConfirmButton: true,
                                    confirmButtonText: 'Reload the page to see details!',
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    allowEnterKey: false,
                                    icon: 'success'
                                }
                            ).then((res) => {
                                console.log(res);

                                if (res.isConfirmed) {
                                    location.reload();
                                }
                            })
                        }
                        else if (result.value.data === "Unable to create indexedin!") {
                            Swal.fire(
                                'Unable to process request',
                                'Contact a better admin',
                                'error'
                            )
                        }
                        else if (result.value.data === "Indexedin already exists") {
                            Swal.fire(
                                'Unable to process request',
                                'Duplicate filter',
                                'error'
                            )
                        }
                        else if (result.value.data === "Insufficient data !!") {
                            Swal.fire(
                                'Insufficient data !',
                                'Check all the fields of the form',
                                'warning'
                            )
                        }
                        else if (result.dismiss === Swal.DismissReason.cancel) {
                            Swal.fire(
                                'Cancelled',
                                'No changes made',
                                'error'
                            )
                        }
                    });
                }
                else if (this.selectedfilter === "typeoffellowship") {
                    Swal.fire({
                        title: 'Are you sure you want to create this filter ?',
                        showCancelButton: true,
                        icon: 'info',
                        confirmButtonText: 'Confirm',
                        showLoaderOnConfirm: true,
                        preConfirm: (login) => {
                            console.log("reached axios");
                            return axios.post('/profile/addTypeoffellowship',
                                object).then((res) => { return res }).catch(err => console.log(err))
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        // what are you returning ? if it's an error we need to show appropriate msg to user   
                        if (result.value.data === "Typeoffellowship created successfully!") {
                            Swal.fire(
                                {
                                    title: "Type of Fellowship was saved successfully!!",
                                    text: "The type of fellowship was saved successfully!",
                                    showConfirmButton: true,
                                    confirmButtonText: 'Reload the page to see details!',
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    allowEnterKey: false,
                                    icon: 'success'
                                }
                            ).then((res) => {
                                console.log(res);

                                if (res.isConfirmed) {
                                    location.reload();
                                }
                            })
                        }
                        else if (result.value.data === "Unable to create typeoffellowship!") {
                            Swal.fire(
                                'Unable to process request',
                                'Contact a better admin',
                                'error'
                            )
                        }
                        else if (result.value.data === "Typeoffellowship already exists") {
                            Swal.fire(
                                'Unable to process request',
                                'Duplicate filter',
                                'error'
                            )
                        }
                        else if (result.value.data === "Insufficient data !!") {
                            Swal.fire(
                                'Insufficient data !',
                                'Check all the fields of the form',
                                'warning'
                            )
                        }
                        else if (result.dismiss === Swal.DismissReason.cancel) {
                            Swal.fire(
                                'Cancelled',
                                'No changes made',
                                'error'
                            )
                        }
                    });
                }
                else if (this.selectedfilter === "typeofpaper") {
                    Swal.fire({
                        title: 'Are you sure you want to create this filter ?',
                        showCancelButton: true,
                        icon: 'info',
                        confirmButtonText: 'Confirm',
                        showLoaderOnConfirm: true,
                        preConfirm: (login) => {
                            console.log("reached axios");
                            return axios.post('/profile/addTypeofpaper',
                                object).then((res) => { return res }).catch(err => console.log(err))
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        // what are you returning ? if it's an error we need to show appropriate msg to user   
                        if (result.value.data === "Typeofpaper created successfully!") {
                            Swal.fire(
                                {
                                    title: "Research Area was saved successfully!!",
                                    text: "The type of paper was saved successfully!",
                                    showConfirmButton: true,
                                    confirmButtonText: 'Reload the page to see details!',
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    allowEnterKey: false,
                                    icon: 'success'
                                }
                            ).then((res) => {
                                console.log(res);

                                if (res.isConfirmed) {
                                    location.reload();
                                }
                            })
                        }
                        else if (result.value.data === "Unable to create typeofpaper!") {
                            Swal.fire(
                                'Unable to process request',
                                'Contact a better admin',
                                'error'
                            )
                        }
                        else if (result.value.data === "Typeofpaper already exists") {
                            Swal.fire(
                                'Unable to process request',
                                'Duplicate filter',
                                'error'
                            )
                        }
                        else if (result.value.data === "Insufficient data !!") {
                            Swal.fire(
                                'Insufficient data !',
                                'Check all the fields of the form',
                                'warning'
                            )
                        }
                        else if (result.dismiss === Swal.DismissReason.cancel) {
                            Swal.fire(
                                'Cancelled',
                                'No changes made',
                                'error'
                            )
                        }
                    });
                }
                else if (this.selectedfilter === "university") {
                    Swal.fire({
                        title: 'Are you sure you want to create this filter ?',
                        showCancelButton: true,
                        icon: 'info',
                        confirmButtonText: 'Confirm',
                        showLoaderOnConfirm: true,
                        preConfirm: (login) => {
                            console.log("reached axios");
                            return axios.post('/profile/addUniversity',
                                object).then((res) => { return res }).catch(err => console.log(err))
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        // what are you returning ? if it's an error we need to show appropriate msg to user   
                        if (result.value.data === "University created successfully!") {
                            Swal.fire(
                                {
                                    title: "University was saved successfully!!",
                                    text: "The university was saved successfully!",
                                    showConfirmButton: true,
                                    confirmButtonText: 'Reload the page to see details!',
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    allowEnterKey: false,
                                    icon: 'success'
                                }
                            ).then((res) => {
                                console.log(res);

                                if (res.isConfirmed) {
                                    location.reload();
                                }
                            })
                        }
                        else if (result.value.data === "Unable to create university!") {
                            Swal.fire(
                                'Unable to process request',
                                'Contact a better admin',
                                'error'
                            )
                        }
                        else if (result.value.data === "University already exists") {
                            Swal.fire(
                                'Unable to process request',
                                'Duplicate filter',
                                'error'
                            )
                        }
                        else if (result.value.data === "Insufficient data !!") {
                            Swal.fire(
                                'Insufficient data !',
                                'Check all the fields of the form',
                                'warning'
                            )
                        }
                        else if (result.dismiss === Swal.DismissReason.cancel) {
                            Swal.fire(
                                'Cancelled',
                                'No changes made',
                                'error'
                            )
                        }
                    });
                }
            }
        }
    })
</script>